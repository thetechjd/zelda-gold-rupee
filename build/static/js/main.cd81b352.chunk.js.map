{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","conversion","event","amountETH","document","getElementById","value","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","TokenInstance","Contract","Token","abi","networks","address","TokenSaleInstance","MyTokenSale","KycContractInstance","KycContract","listenToTokenTransfer","setState","updateUserTokens","alert","error","methods","balanceOf","call","events","Transfer","to","on","handleMoreTokensPurchase","e","preventDefault","transferAmount","target","sendAmount","buyTokens","send","from","Math","pow","handleInputChange","type","checked","name","transferHandler","transferAmountinEth","handleKycWhitelisting","setKycCompleted","this","className","onChange","onClick","onSubmit","id","placeholder","required","min","step","class","color","size","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd81b352.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Token from \"./contracts/Token.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\nimport $ from \"jquery\";\n\nimport \"./App.css\";\nimport WaveLoading from \"react-loadingg/lib/WaveLoading\";\n\nclass App extends Component {\n  state = { loaded: false, kycAddress: \"0x12434\", tokenSaleAddress: null, userTokens: 0 };\n\n  conversion = (event) => {\n    let amountETH = document.getElementById('sendAmount').value;\n    document.getElementById('converted').value = amountETH * 1000;\n  }\n\n  componentDidMount = async () => {\n    try {\n\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n\n      this.TokenInstance = new this.web3.eth.Contract(\n        Token.abi,\n        Token.networks[this.networkId] && Token.networks[this.networkId].address\n      );\n\n      this.TokenSaleInstance = new this.web3.eth.Contract(\n        MyTokenSale.abi,\n        MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address\n      );\n\n      this.KycContractInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      this.setState({ loaded: true, tokenSaleAddress: MyTokenSale.networks[this.networkId].address }, this.updateUserTokens);\n\n      document.addEventListener('keyup', this.conversion);\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n\n  updateUserTokens = async () => {\n    let userTokens = await this.TokenInstance.methods.balanceOf(this.accounts[0]).call();\n    this.setState({ userTokens: userTokens });\n  }\n\n  listenToTokenTransfer = () => {\n    this.TokenInstance.events.Transfer({ to: this.accounts[0] }).on(\"data\", this.updateUserTokens);\n  }\n\n  handleMoreTokensPurchase = async (e) => {\n    e.preventDefault();\n    let transferAmount = e.target.sendAmount.value;\n    await this.TokenSaleInstance.methods.buyTokens(this.accounts[0]).send({ from: this.accounts[0], value: transferAmount * Math.pow(10, 18) })\n      ;\n  }\n\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n  transferHandler = async (e) => {\n    e.preventDefault();\n    let transferAmountinEth = e.target.sendAmount.value;\n    let transferAmount = transferAmountinEth * Math.pow(10, 18);\n    return transferAmount;\n\n\n\n  }\n\n  handleKycWhitelisting = async () => {\n    await this.KycContractInstance.methods.setKycCompleted(this.state.kycAddress).send({ from: this.accounts[0] });\n    alert(\"KYC for \" + this.state.kycAddress + \" is completed\");\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <WaveLoading color='#000000' size='large' />;\n    }\n    return (\n\n      <div className=\"App\">\n        <h1>Zelda Gold Rupee(ZGR) Token Sale</h1>\n        <p>Get your tokens today</p>\n        <p>Buyer: {this.accounts}</p>\n        <h2>KYC Whitelisting</h2>\n        <p>\n          From the historic tales of Godric, the unmatched prowess of Albus, to the clever charm of Hermione. This house has attained glory unsurpassed and has always provided a light to vanquish the darkness.\n          There is no greater than honour than an official symbol of association with this noble house.\n        </p>\n        <p>\n          Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n          <button type=\"button\" onClick={this.handleKycWhitelisting}>Add To Whitelist</button>\n        </p>\n        <h2>Buy Tokens</h2>\n        <p>Â¥ou currently have {this.state.userTokens} ZGR</p>\n        <p>If you want to buy tokens, send wei to this address: {this.state.tokenSaleAddress} </p>\n        <form onSubmit={this.handleMoreTokensPurchase}>\n          <input type='email' id='email' placeholder='Email' required></input>\n          <br></br>\n          <br></br>\n          <input type='number' placeholder='ETH' id='sendAmount' min='0' step='.000000000000000001' />\n          <input id='converted' type=\"text\" class=\"form-control formBlock\" name=\"funding\" placeholder=\"ZGR\" />\n          <button type=\"submit\">Buy More ZGR Tokens</button>\n          <br></br>\n          <br></br>\n          <div class='authorization'>\n            <input type='checkbox' required></input><p class='authorization'>By checking this box you are agreeing that your email address will represent your electronic signature.</p>\n          </div>\n\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}